#!/usr/bin/env ruby

require "rubygems"
gem "activesupport", "= 2.3.5"
gem "actionpack", "= 2.3.5"
gem "coderay"

require "active_support/core_ext/module/delegation"
require "action_view/helpers/tag_helper"

#                                vim:ts=4:sw=4:
# = RedCloth - Textile and Markdown Hybrid for Ruby
#
# Homepage::  http://whytheluckystiff.net/ruby/redcloth/
# Author::    why the lucky stiff (http://whytheluckystiff.net/)
# Copyright:: (cc) 2004 why the lucky stiff (and his puppet organizations.)
# License::   BSD
#
# (see http://hobix.com/textile/ for a Textile Reference.)
#
# Based on (and also inspired by) both:
#
# PyTextile: http://diveintomark.org/projects/textile/textile.py.txt
# Textism for PHP: http://www.textism.com/tools/textile/
#
#

# = RedCloth
#
# RedCloth is a Ruby library for converting Textile and/or Markdown
# into HTML.  You can use either format, intermingled or separately.
# You can also extend RedCloth to honor your own custom text stylings.
#
# RedCloth users are encouraged to use Textile if they are generating
# HTML and to use Markdown if others will be viewing the plain text.
#
# == What is Textile?
#
# Textile is a simple formatting style for text
# documents, loosely based on some HTML conventions.
#
# == Sample Textile Text
#
#  h2. This is a title
#
#  h3. This is a subhead
#
#  This is a bit of paragraph.
#
#  bq. This is a blockquote.
#
# = Writing Textile
#
# A Textile document consists of paragraphs.  Paragraphs
# can be specially formatted by adding a small instruction
# to the beginning of the paragraph.
#
#  h[n].   Header of size [n].
#  bq.     Blockquote.
#  #       Numeric list.
#  *       Bulleted list.
#
# == Quick Phrase Modifiers
#
# Quick phrase modifiers are also included, to allow formatting
# of small portions of text within a paragraph.
#
#  \_emphasis\_
#  \_\_italicized\_\_
#  \*strong\*
#  \*\*bold\*\*
#  ??citation??
#  -deleted text-
#  +inserted text+
#  ^superscript^
#  ~subscript~
#  @code@
#  %(classname)span%
#
#  ==notextile== (leave text alone)
#
# == Links
#
# To make a hypertext link, put the link text in "quotation 
# marks" followed immediately by a colon and the URL of the link.
# 
# Optional: text in (parentheses) following the link text, 
# but before the closing quotation mark, will become a Title 
# attribute for the link, visible as a tool tip when a cursor is above it.
# 
# Example:
#
#  "This is a link (This is a title) ":http://www.textism.com
# 
# Will become:
# 
#  <a href="http://www.textism.com" title="This is a title">This is a link</a>
#
# == Images
#
# To insert an image, put the URL for the image inside exclamation marks.
#
# Optional: text that immediately follows the URL in (parentheses) will 
# be used as the Alt text for the image. Images on the web should always 
# have descriptive Alt text for the benefit of readers using non-graphical 
# browsers.
#
# Optional: place a colon followed by a URL immediately after the 
# closing ! to make the image into a link.
# 
# Example:
#
#  !http://www.textism.com/common/textist.gif(Textist)!
#
# Will become:
#
#  <img src="http://www.textism.com/common/textist.gif" alt="Textist" />
#
# With a link:
#
#  !/common/textist.gif(Textist)!:http://textism.com
#
# Will become:
#
#  <a href="http://textism.com"><img src="/common/textist.gif" alt="Textist" /></a>
#
# == Defining Acronyms
#
# HTML allows authors to define acronyms via the tag. The definition appears as a 
# tool tip when a cursor hovers over the acronym. A crucial aid to clear writing, 
# this should be used at least once for each acronym in documents where they appear.
#
# To quickly define an acronym in Textile, place the full text in (parentheses) 
# immediately following the acronym.
# 
# Example:
#
#  ACLU(American Civil Liberties Union)
#
# Will become:
#
#  <acronym title="American Civil Liberties Union">ACLU</acronym>
#
# == Adding Tables
#
# In Textile, simple tables can be added by seperating each column by
# a pipe.
#
#     |a|simple|table|row|
#     |And|Another|table|row|
#
# Attributes are defined by style definitions in parentheses.
#
#     table(border:1px solid black).
#     (background:#ddd;color:red). |{}| | | |
#
# == Using RedCloth
# 
# RedCloth is simply an extension of the String class, which can handle
# Textile formatting.  Use it like a String and output HTML with its
# RedCloth#to_html method.
#
#  doc = RedCloth.new "
#
#  h2. Test document
#
#  Just a simple test."
#
#  puts doc.to_html
#
# By default, RedCloth uses both Textile and Markdown formatting, with
# Textile formatting taking precedence.  If you want to turn off Markdown
# formatting, to boost speed and limit the processor:
#
#  class RedCloth::Textile.new( str )

class RedCloth3 < String

    VERSION = '3.0.4'
    DEFAULT_RULES = [:textile, :markdown]

    #
    # Two accessor for setting security restrictions.
    #
    # This is a nice thing if you're using RedCloth for
    # formatting in public places (e.g. Wikis) where you
    # don't want users to abuse HTML for bad things.
    #
    # If +:filter_html+ is set, HTML which wasn't
    # created by the Textile processor will be escaped.
    #
    # If +:filter_styles+ is set, it will also disable
    # the style markup specifier. ('{color: red}')
    #
    attr_accessor :filter_html, :filter_styles

    #
    # Accessor for toggling hard breaks.
    #
    # If +:hard_breaks+ is set, single newlines will
    # be converted to HTML break tags.  This is the
    # default behavior for traditional RedCloth.
    #
    attr_accessor :hard_breaks

    # Accessor for toggling lite mode.
    #
    # In lite mode, block-level rules are ignored.  This means
    # that tables, paragraphs, lists, and such aren't available.
    # Only the inline markup for bold, italics, entities and so on.
    #
    #   r = RedCloth.new( "And then? She *fell*!", [:lite_mode] )
    #   r.to_html
    #   #=> "And then? She <strong>fell</strong>!"
    #
    attr_accessor :lite_mode

    #
    # Accessor for toggling span caps.
    #
    # Textile places `span' tags around capitalized
    # words by default, but this wreaks havoc on Wikis.
    # If +:no_span_caps+ is set, this will be
    # suppressed.
    #
    attr_accessor :no_span_caps

    #
    # Establishes the markup predence.  Available rules include:
    #
    # == Textile Rules
    #
    # The following textile rules can be set individually.  Or add the complete
    # set of rules with the single :textile rule, which supplies the rule set in
    # the following precedence:
    #
    # refs_textile::          Textile references (i.e. [hobix]http://hobix.com/)
    # block_textile_table::   Textile table block structures
    # block_textile_lists::   Textile list structures
    # block_textile_prefix::  Textile blocks with prefixes (i.e. bq., h2., etc.)
    # inline_textile_image::  Textile inline images
    # inline_textile_link::   Textile inline links
    # inline_textile_span::   Textile inline spans
    # glyphs_textile:: Textile entities (such as em-dashes and smart quotes)
    #
    # == Markdown
    #
    # refs_markdown::         Markdown references (for example: [hobix]: http://hobix.com/)
    # block_markdown_setext:: Markdown setext headers
    # block_markdown_atx::    Markdown atx headers
    # block_markdown_rule::   Markdown horizontal rules
    # block_markdown_bq::     Markdown blockquotes
    # block_markdown_lists::  Markdown lists
    # inline_markdown_link::  Markdown links
    attr_accessor :rules

    # Returns a new RedCloth object, based on _string_ and
    # enforcing all the included _restrictions_.
    #
    #   r = RedCloth.new( "h1. A <b>bold</b> man", [:filter_html] )
    #   r.to_html
    #     #=>"<h1>A &lt;b&gt;bold&lt;/b&gt; man</h1>"
    #
    def initialize( string, restrictions = [] )
        restrictions.each { |r| method( "#{ r }=" ).call( true ) }
        super( string )
    end

    #
    # Generates HTML from the Textile contents.
    #
    #   r = RedCloth.new( "And then? She *fell*!" )
    #   r.to_html( true )
    #     #=>"And then? She <strong>fell</strong>!"
    #
    def to_html( *rules )
        rules = DEFAULT_RULES if rules.empty?
        # make our working copy
        text = self.dup
        
        @urlrefs = {}
        @shelf = []
        textile_rules = [:block_textile_table, :block_textile_lists,
                         :block_textile_prefix, :inline_textile_image, :inline_textile_link,
                         :inline_textile_code, :inline_textile_span, :glyphs_textile]
        markdown_rules = [:refs_markdown, :block_markdown_setext, :block_markdown_atx, :block_markdown_rule,
                          :block_markdown_bq, :block_markdown_lists, 
                          :inline_markdown_reflink, :inline_markdown_link]
        @rules = rules.collect do |rule|
            case rule
            when :markdown
                markdown_rules
            when :textile
                textile_rules
            else
                rule
            end
        end.flatten

        # standard clean up
        incoming_entities text 
        clean_white_space text 

        # start processor
        @pre_list = []
        rip_offtags text
        no_textile text
        escape_html_tags text
        hard_break text 
        unless @lite_mode
            refs text
            # need to do this before text is split by #blocks
            block_textile_quotes text
            blocks text
        end
        inline text
        smooth_offtags text

        retrieve text

        text.gsub!( /<\/?notextile>/, '' )
        text.gsub!( /x%x%/, '&#38;' )
        clean_html text if filter_html
        text.strip!
        text

    end

    #######
    private
    #######
    #
    # Mapping of 8-bit ASCII codes to HTML numerical entity equivalents.
    # (from PyTextile)
    #
    TEXTILE_TAGS =

        [[128, 8364], [129, 0], [130, 8218], [131, 402], [132, 8222], [133, 8230], 
         [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], 
         [140, 338], [141, 0], [142, 0], [143, 0], [144, 0], [145, 8216], [146, 8217], 
         [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], 
         [153, 8482], [154, 353], [155, 8250], [156, 339], [157, 0], [158, 0], [159, 376]].

        collect! do |a, b|
            [a.chr, ( b.zero? and "" or "&#{ b };" )]
        end

    #
    # Regular expressions to convert to HTML.
    #
    A_HLGN = /(?:(?:<>|<|>|\=|[()]+)+)/
    A_VLGN = /[\-^~]/
    C_CLAS = '(?:\([^)]+\))'
    C_LNGE = '(?:\[[^\[\]]+\])'
    C_STYL = '(?:\{[^}]+\})'
    S_CSPN = '(?:\\\\\d+)'
    S_RSPN = '(?:/\d+)'
    A = "(?:#{A_HLGN}?#{A_VLGN}?|#{A_VLGN}?#{A_HLGN}?)"
    S = "(?:#{S_CSPN}?#{S_RSPN}|#{S_RSPN}?#{S_CSPN}?)"
    C = "(?:#{C_CLAS}?#{C_STYL}?#{C_LNGE}?|#{C_STYL}?#{C_LNGE}?#{C_CLAS}?|#{C_LNGE}?#{C_STYL}?#{C_CLAS}?)"
    # PUNCT = Regexp::quote( '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~' )
    PUNCT = Regexp::quote( '!"#$%&\'*+,-./:;=?@\\^_`|~' )
    PUNCT_NOQ = Regexp::quote( '!"#$&\',./:;=?@\\`|' )
    PUNCT_Q = Regexp::quote( '*-_+^~%' )
    HYPERLINK = '(\S+?)([^\w\s/;=\?]*?)(?=\s|<|$)'

    # Text markup tags, don't conflict with block tags
    SIMPLE_HTML_TAGS = [
        'tt', 'b', 'i', 'big', 'small', 'em', 'strong', 'dfn', 'code', 
        'samp', 'kbd', 'var', 'cite', 'abbr', 'acronym', 'a', 'img', 'br',
        'br', 'map', 'q', 'sub', 'sup', 'span', 'bdo'
    ]

    QTAGS = [
        ['**', 'b', :limit],
        ['*', 'strong', :limit],
        ['??', 'cite', :limit],
        ['-', 'del', :limit],
        ['__', 'i', :limit],
        ['_', 'em', :limit],
        ['%', 'span', :limit],
        ['+', 'ins', :limit],
        ['^', 'sup', :limit],
        ['~', 'sub', :limit]
    ] 
    QTAGS_JOIN = QTAGS.map {|rc, ht, rtype| Regexp::quote rc}.join('|')
    
    QTAGS.collect! do |rc, ht, rtype|
        rcq = Regexp::quote rc
        re =
            case rtype
            when :limit
                /(^|[>\s\(])          # sta
                (?!\-\-)
                (#{QTAGS_JOIN}|)      # oqs
                (#{rcq})              # qtag
                (\w|[^\s].*?[^\s])    # content
                (?!\-\-)
                #{rcq}
                (#{QTAGS_JOIN}|)      # oqa
                (?=[[:punct:]]|<|\s|\)|$)/x
            else
                /(#{rcq})
                (#{C})
                (?::(\S+))?
                (\w|[^\s\-].*?[^\s\-])
                #{rcq}/xm 
            end
        [rc, ht, re, rtype]
    end

    # Elements to handle
    GLYPHS = [
    #   [ /([^\s\[{(>])?\'([dmst]\b|ll\b|ve\b|\s|:|$)/, '\1&#8217;\2' ], # single closing
    #   [ /([^\s\[{(>#{PUNCT_Q}][#{PUNCT_Q}]*)\'/, '\1&#8217;' ], # single closing
    #   [ /\'(?=[#{PUNCT_Q}]*(s\b|[\s#{PUNCT_NOQ}]))/, '&#8217;' ], # single closing
    #   [ /\'/, '&#8216;' ], # single opening
    #   [ /</, '&lt;' ], # less-than
    #   [ />/, '&gt;' ], # greater-than
    #   [ /([^\s\[{(])?"(\s|:|$)/, '\1&#8221;\2' ], # double closing
    #   [ /([^\s\[{(>#{PUNCT_Q}][#{PUNCT_Q}]*)"/, '\1&#8221;' ], # double closing
    #   [ /"(?=[#{PUNCT_Q}]*[\s#{PUNCT_NOQ}])/, '&#8221;' ], # double closing
    #   [ /"/, '&#8220;' ], # double opening
    #   [ /\b( )?\.{3}/, '\1&#8230;' ], # ellipsis
    #   [ /\b([A-Z][A-Z0-9]{2,})\b(?:[(]([^)]*)[)])/, '<acronym title="\2">\1</acronym>' ], # 3+ uppercase acronym
    #   [ /(^|[^"][>\s])([A-Z][A-Z0-9 ]+[A-Z0-9])([^<A-Za-z0-9]|$)/, '\1<span class="caps">\2</span>\3', :no_span_caps ], # 3+ uppercase caps
    #   [ /(\.\s)?\s?--\s?/, '\1&#8212;' ], # em dash
    #   [ /\s->\s/, ' &rarr; ' ], # right arrow
    #   [ /\s-\s/, ' &#8211; ' ], # en dash
    #   [ /(\d+) ?x ?(\d+)/, '\1&#215;\2' ], # dimension sign
    #   [ /\b ?[(\[]TM[\])]/i, '&#8482;' ], # trademark
    #   [ /\b ?[(\[]R[\])]/i, '&#174;' ], # registered
    #   [ /\b ?[(\[]C[\])]/i, '&#169;' ] # copyright
    ]

    H_ALGN_VALS = {
        '<' => 'left',
        '=' => 'center',
        '>' => 'right',
        '<>' => 'justify'
    }

    V_ALGN_VALS = {
        '^' => 'top',
        '-' => 'middle',
        '~' => 'bottom'
    }

    #
    # Flexible HTML escaping
    #
    def htmlesc( str, mode=:Quotes )
      if str
        str.gsub!( '&', '&amp;' )
        str.gsub!( '"', '&quot;' ) if mode != :NoQuotes
        str.gsub!( "'", '&#039;' ) if mode == :Quotes
        str.gsub!( '<', '&lt;')
        str.gsub!( '>', '&gt;')
      end
      str
    end

    # Search and replace for Textile glyphs (quotes, dashes, other symbols)
    def pgl( text )
        #GLYPHS.each do |re, resub, tog|
        #    next if tog and method( tog ).call
        #    text.gsub! re, resub
        #end
        text.gsub!(/\b([A-Z][A-Z0-9]{2,})\b(?:[(]([^)]*)[)])/) do |m|
          "<acronym title=\"#{htmlesc $2}\">#{$1}</acronym>"
        end
    end

    # Parses Textile attribute lists and builds an HTML attribute string
    def pba( text_in, element = "" )
        
        return '' unless text_in

        style = []
        text = text_in.dup
        if element == 'td'
            colspan = $1 if text =~ /\\(\d+)/
            rowspan = $1 if text =~ /\/(\d+)/
            style << "vertical-align:#{ v_align( $& ) };" if text =~ A_VLGN
        end

        style << "#{ htmlesc $1 };" if text.sub!( /\{([^}]*)\}/, '' ) && !filter_styles

        lang = $1 if
            text.sub!( /\[([^)]+?)\]/, '' )

        cls = $1 if
            text.sub!( /\(([^()]+?)\)/, '' )
                        
        style << "padding-left:#{ $1.length }em;" if
            text.sub!( /([(]+)/, '' )

        style << "padding-right:#{ $1.length }em;" if text.sub!( /([)]+)/, '' )

        style << "text-align:#{ h_align( $& ) };" if text =~ A_HLGN

        cls, id = $1, $2 if cls =~ /^(.*?)#(.*)$/
        
        atts = ''
        atts << " style=\"#{ style.join }\"" unless style.empty?
        atts << " class=\"#{ cls }\"" unless cls.to_s.empty?
        atts << " lang=\"#{ lang }\"" if lang
        atts << " id=\"#{ id }\"" if id
        atts << " colspan=\"#{ colspan }\"" if colspan
        atts << " rowspan=\"#{ rowspan }\"" if rowspan
        
        atts
    end

    TABLE_RE = /^(?:table(_?#{S}#{A}#{C})\. ?\n)?^(#{A}#{C}\.? ?\|.*?\|)(\n\n|\Z)/m
    
    # Parses a Textile table block, building HTML from the result.
    def block_textile_table( text ) 
        text.gsub!( TABLE_RE ) do |matches|

            tatts, fullrow = $~[1..2]
            tatts = pba( tatts, 'table' )
            tatts = shelve( tatts ) if tatts
            rows = []

            fullrow.each_line do |row|
                ratts, row = pba( $1, 'tr' ), $2 if row =~ /^(#{A}#{C}\. )(.*)/m
                cells = []
                row.split( /(\|)(?![^\[\|]*\]\])/ )[1..-2].each do |cell|
                    next if cell == '|'
                    ctyp = 'd'
                    ctyp = 'h' if cell =~ /^_/

                    catts = ''
                    catts, cell = pba( $1, 'td' ), $2 if cell =~ /^(_?#{S}#{A}#{C}\. ?)(.*)/

                    catts = shelve( catts ) if catts
                    cells << "\t\t\t<t#{ ctyp }#{ catts }>#{ cell }</t#{ ctyp }>" 
                end
                ratts = shelve( ratts ) if ratts
                rows << "\t\t<tr#{ ratts }>\n#{ cells.join( "\n" ) }\n\t\t</tr>"
            end
            "\t<table#{ tatts }>\n#{ rows.join( "\n" ) }\n\t</table>\n\n"
        end
    end

    LISTS_RE = /^([#*]+?#{C} .*?)$(?![^#*])/m
    LISTS_CONTENT_RE = /^([#*]+)(#{A}#{C}) (.*)$/m

    # Parses Textile lists and generates HTML
    def block_textile_lists( text ) 
        text.gsub!( LISTS_RE ) do |match|
            lines = match.split( /\n/ )
            last_line = -1
            depth = []
            lines.each_with_index do |line, line_id|
                if line =~ LISTS_CONTENT_RE 
                    tl,atts,content = $~[1..3]
                    if depth.last
                        if depth.last.length > tl.length
                            (depth.length - 1).downto(0) do |i|
                                break if depth[i].length == tl.length
                                lines[line_id - 1] << "</li>\n\t</#{ lT( depth[i] ) }l>\n\t"
                                depth.pop
                            end
                        end
                        if depth.last and depth.last.length == tl.length
                            lines[line_id - 1] << '</li>'
                        end
                    end
                    unless depth.last == tl
                        depth << tl
                        atts = pba( atts )
                        atts = shelve( atts ) if atts
                        lines[line_id] = "\t<#{ lT(tl) }l#{ atts }>\n\t<li>#{ content }"
                    else
                        lines[line_id] = "\t\t<li>#{ content }"
                    end
                    last_line = line_id

                else
                    last_line = line_id
                end
                if line_id - last_line > 1 or line_id == lines.length - 1
                    depth.delete_if do |v|
                        lines[last_line] << "</li>\n\t</#{ lT( v ) }l>"
                    end
                end
            end
            lines.join( "\n" )
        end
    end
    
    QUOTES_RE = /(^>+([^\n]*?)(\n|$))+/m
    QUOTES_CONTENT_RE = /^([> ]+)(.*)$/m
    
    def block_textile_quotes( text )
      text.gsub!( QUOTES_RE ) do |match|
        lines = match.split( /\n/ )
        quotes = ''
        indent = 0
        lines.each do |line|
          line =~ QUOTES_CONTENT_RE 
          bq,content = $1, $2
          l = bq.count('>')
          if l != indent
            quotes << ("\n\n" + (l>indent ? '<blockquote>' * (l-indent) : '</blockquote>' * (indent-l)) + "\n\n")
            indent = l
          end
          quotes << (content + "\n")
        end
        quotes << ("\n" + '</blockquote>' * indent + "\n\n")
        quotes
      end
    end

    CODE_RE = /(\W)
        @
        (?:\|(\w+?)\|)?
        (.+?)
        @
        (?=\W)/x

    def inline_textile_code( text ) 
        text.gsub!( CODE_RE ) do |m|
            before,lang,code,after = $~[1..4]
            lang = " lang=\"#{ lang }\"" if lang
            rip_offtags( "#{ before }<code#{ lang }>#{ code }</code>#{ after }", false )
        end
    end

    def lT( text ) 
        text =~ /\#$/ ? 'o' : 'u'
    end

    def hard_break( text )
        text.gsub!( /(.)\n(?!\Z| *([#*=]+(\s|$)|[{|]))/, "\\1<br />" ) if hard_breaks
    end

    BLOCKS_GROUP_RE = /\n{2,}(?! )/m

    def blocks( text, deep_code = false )
        text.replace( text.split( BLOCKS_GROUP_RE ).collect do |blk|
            plain = blk !~ /\A[#*> ]/

            # skip blocks that are complex HTML
            if blk =~ /^<\/?(\w+).*>/ and not SIMPLE_HTML_TAGS.include? $1
                blk
            else
                # search for indentation levels
                blk.strip!
                if blk.empty?
                    blk
                else
                    code_blk = nil
                    blk.gsub!( /((?:\n(?:\n^ +[^\n]*)+)+)/m ) do |iblk|
                        flush_left iblk
                        blocks iblk, plain
                        iblk.gsub( /^(\S)/, "\t\\1" )
                        if plain
                            code_blk = iblk; ""
                        else
                            iblk
                        end
                    end

                    block_applied = 0 
                    @rules.each do |rule_name|
                        block_applied += 1 if ( rule_name.to_s.match /^block_/ and method( rule_name ).call( blk ) )
                    end
                    if block_applied.zero?
                        if deep_code
                            blk = "\t<pre><code>#{ blk }</code></pre>"
                        else
                            blk = "\t<p>#{ blk }</p>"
                        end
                    end
                    # hard_break blk
                    blk + "\n#{ code_blk }"
                end
            end

        end.join( "\n\n" ) )
    end

    def textile_bq( tag, atts, cite, content )
        cite, cite_title = check_refs( cite )
        cite = " cite=\"#{ cite }\"" if cite
        atts = shelve( atts ) if atts
        "\t<blockquote#{ cite }>\n\t\t<p#{ atts }>#{ content }</p>\n\t</blockquote>"
    end

    def textile_p( tag, atts, cite, content )
        atts = shelve( atts ) if atts
        "\t<#{ tag }#{ atts }>#{ content }</#{ tag }>"
    end

    alias textile_h1 textile_p
    alias textile_h2 textile_p
    alias textile_h3 textile_p
    alias textile_h4 textile_p
    alias textile_h5 textile_p
    alias textile_h6 textile_p

    def textile_fn_( tag, num, atts, cite, content )
        atts << " id=\"fn#{ num }\" class=\"footnote\""
        content = "<sup>#{ num }</sup> #{ content }"
        atts = shelve( atts ) if atts
        "\t<p#{ atts }>#{ content }</p>"
    end

    BLOCK_RE = /^(([a-z]+)(\d*))(#{A}#{C})\.(?::(\S+))? (.*)$/m

    def block_textile_prefix( text ) 
        if text =~ BLOCK_RE
            tag,tagpre,num,atts,cite,content = $~[1..6]
            atts = pba( atts )

            # pass to prefix handler
            if respond_to? "textile_#{ tag }", true
                text.gsub!( $&, method( "textile_#{ tag }" ).call( tag, atts, cite, content ) )
            elsif respond_to? "textile_#{ tagpre }_", true
                text.gsub!( $&, method( "textile_#{ tagpre }_" ).call( tagpre, num, atts, cite, content ) )
            end
        end
    end
    
    SETEXT_RE = /\A(.+?)\n([=-])[=-]* *$/m
    def block_markdown_setext( text )
        if text =~ SETEXT_RE
            tag = if $2 == "="; "h1"; else; "h2"; end
            blk, cont = "<#{ tag }>#{ $1 }</#{ tag }>", $'
            blocks cont
            text.replace( blk + cont )
        end
    end

    ATX_RE = /\A(\#{1,6})  # $1 = string of #'s
              [ ]*
              (.+?)       # $2 = Header text
              [ ]*
              \#*         # optional closing #'s (not counted)
              $/x
    def block_markdown_atx( text )
        if text =~ ATX_RE
            tag = "h#{ $1.length }"
            blk, cont = "<#{ tag }>#{ $2 }</#{ tag }>\n\n", $'
            blocks cont
            text.replace( blk + cont )
        end
    end

    MARKDOWN_BQ_RE = /\A(^ *> ?.+$(.+\n)*\n*)+/m

    def block_markdown_bq( text )
        text.gsub!( MARKDOWN_BQ_RE ) do |blk|
            blk.gsub!( /^ *> ?/, '' )
            flush_left blk
            blocks blk
            blk.gsub!( /^(\S)/, "\t\\1" )
            "<blockquote>\n#{ blk }\n</blockquote>\n\n"
        end
    end

    MARKDOWN_RULE_RE = /^(#{
        ['*', '-', '_'].collect { |ch| ' ?(' + Regexp::quote( ch ) + ' ?){3,}' }.join( '|' )
    })$/

    def block_markdown_rule( text )
        text.gsub!( MARKDOWN_RULE_RE ) do |blk|
            "<hr />"
        end
    end

    # XXX TODO XXX
    def block_markdown_lists( text )
    end

    def inline_textile_span( text ) 
        QTAGS.each do |qtag_rc, ht, qtag_re, rtype|
            text.gsub!( qtag_re ) do |m|
             
                case rtype
                when :limit
                    sta,oqs,qtag,content,oqa = $~[1..6]
                    atts = nil
                    if content =~ /^(#{C})(.+)$/
                      atts, content = $~[1..2]
                    end
                else
                    qtag,atts,cite,content = $~[1..4]
                    sta = ''
                end
                atts = pba( atts )
                atts = shelve( atts ) if atts

                "#{ sta }#{ oqs }<#{ ht }#{ atts }>#{ content }</#{ ht }>#{ oqa }"

            end
        end
    end

    LINK_RE = /
            (
            ([\s\[{(]|[#{PUNCT}])?     # $pre
            "                          # start
            (#{C})                     # $atts
            ([^"\n]+?)                 # $text
            \s?
            (?:\(([^)]+?)\)(?="))?     # $title
            ":
            (                          # $url
            (\/|[a-zA-Z]+:\/\/|www\.|mailto:)  # $proto
            [\w\/]\S+?
            )               
            (\/)?                      # $slash
            ([^\w\=\/;\(\)]*?)         # $post
            )
            (?=<|\s|$)
        /x 
#"
    def inline_textile_link( text ) 
        text.gsub!( LINK_RE ) do |m|
          all,pre,atts,text,title,url,proto,slash,post = $~[1..9]
          if text.include?('<br />')
            all
          else
            url, url_title = check_refs( url )
            title ||= url_title
            
            # Idea below : an URL with unbalanced parethesis and
            # ending by ')' is put into external parenthesis
            if ( url[-1]==?) and ((url.count("(") - url.count(")")) < 0 ) )
              url=url[0..-2] # discard closing parenth from url
              post = ")"+post # add closing parenth to post
            end
            atts = pba( atts )
            atts = " href=\"#{ htmlesc url }#{ slash }\"#{ atts }"
            atts << " title=\"#{ htmlesc title }\"" if title
            atts = shelve( atts ) if atts
            
            external = (url =~ /^https?:\/\//) ? ' class="external"' : ''
            
            "#{ pre }<a#{ atts }#{ external }>#{ text }</a>#{ post }"
          end
        end
    end

    MARKDOWN_REFLINK_RE = /
            \[([^\[\]]+)\]      # $text
            [ ]?                # opt. space
            (?:\n[ ]*)?         # one optional newline followed by spaces
            \[(.*?)\]           # $id
        /x 

    def inline_markdown_reflink( text ) 
        text.gsub!( MARKDOWN_REFLINK_RE ) do |m|
            text, id = $~[1..2]

            if id.empty?
                url, title = check_refs( text )
            else
                url, title = check_refs( id )
            end
            
            atts = " href=\"#{ url }\""
            atts << " title=\"#{ title }\"" if title
            atts = shelve( atts )
            
            "<a#{ atts }>#{ text }</a>"
        end
    end

    MARKDOWN_LINK_RE = /
            \[([^\[\]]+)\]      # $text
            \(                  # open paren
            [ \t]*              # opt space
            <?(.+?)>?           # $href
            [ \t]*              # opt space
            (?:                 # whole title
            (['"])              # $quote
            (.*?)               # $title
            \3                  # matching quote
            )?                  # title is optional
            \)
        /x 

    def inline_markdown_link( text ) 
        text.gsub!( MARKDOWN_LINK_RE ) do |m|
            text, url, quote, title = $~[1..4]

            atts = " href=\"#{ url }\""
            atts << " title=\"#{ title }\"" if title
            atts = shelve( atts )
            
            "<a#{ atts }>#{ text }</a>"
        end
    end

    TEXTILE_REFS_RE =  /(^ *)\[([^\[\n]+?)\](#{HYPERLINK})(?=\s|$)/
    MARKDOWN_REFS_RE = /(^ *)\[([^\n]+?)\]:\s+<?(#{HYPERLINK})>?(?:\s+"((?:[^"]|\\")+)")?(?=\s|$)/m

    def refs( text )
        @rules.each do |rule_name|
            method( rule_name ).call( text ) if rule_name.to_s.match /^refs_/
        end
    end

    def refs_textile( text ) 
        text.gsub!( TEXTILE_REFS_RE ) do |m|
            flag, url = $~[2..3]
            @urlrefs[flag.downcase] = [url, nil]
            nil
        end
    end
    
    def refs_markdown( text )
        text.gsub!( MARKDOWN_REFS_RE ) do |m|
            flag, url = $~[2..3]
            title = $~[6]
            @urlrefs[flag.downcase] = [url, title]
            nil
        end
    end

    def check_refs( text ) 
        ret = @urlrefs[text.downcase] if text
        ret || [text, nil]
    end

    IMAGE_RE = /
            (>|\s|^)           # start of line?
            \!                   # opening
            (\<|\=|\>)?          # optional alignment atts
            (#{C})               # optional style,class atts
            (?:\. )?             # optional dot-space
            ([^\s(!]+?)          # presume this is the src
            \s?                  # optional space
            (?:\(((?:[^\(\)]|\([^\)]+\))+?)\))?   # optional title
            \!                   # closing
            (?::#{ HYPERLINK })? # optional href
        /x 

    def inline_textile_image( text ) 
        text.gsub!( IMAGE_RE )  do |m|
            stln,algn,atts,url,title,href,href_a1,href_a2 = $~[1..8]
            htmlesc title
            atts = pba( atts )
            atts = " src=\"#{ url }\"#{ atts }"
            atts << " title=\"#{ title }\"" if title
            atts << " alt=\"#{ title }\"" 
            # size = @getimagesize($url);
            # if($size) $atts.= " $size[3]";

            href, alt_title = check_refs( href ) if href
            url, url_title = check_refs( url )

            out = ''
            out << "<a#{ shelve( " href=\"#{ href }\"" ) }>" if href
            out << "<img#{ shelve( atts ) } />"
            out << "</a>#{ href_a1 }#{ href_a2 }" if href
            
            if algn 
                algn = h_align( algn )
                if stln == "<p>"
                    out = "<p style=\"float:#{ algn }\">#{ out }"
                else
                    out = "#{ stln }<div style=\"float:#{ algn }\">#{ out }</div>"
                end
            else
                out = stln + out
            end

            out
        end
    end

    def shelve( val ) 
        @shelf << val
        " :redsh##{ @shelf.length }:"
    end
    
    def retrieve( text ) 
        @shelf.each_with_index do |r, i|
            text.gsub!( " :redsh##{ i + 1 }:", r )
        end
    end

    def incoming_entities( text ) 
        ## turn any incoming ampersands into a dummy character for now.
        ## This uses a negative lookahead for alphanumerics followed by a semicolon,
        ## implying an incoming html entity, to be skipped

        text.gsub!( /&(?![#a-z0-9]+;)/i, "x%x%" )
    end

    def no_textile( text ) 
        text.gsub!( /(^|\s)==([^=]+.*?)==(\s|$)?/,
            '\1<notextile>\2</notextile>\3' )
        text.gsub!( /^ *==([^=]+.*?)==/m,
            '\1<notextile>\2</notextile>\3' )
    end

    def clean_white_space( text ) 
        # normalize line breaks
        text.gsub!( /\r\n/, "\n" )
        text.gsub!( /\r/, "\n" )
        text.gsub!( /\t/, '    ' )
        text.gsub!( /^ +$/, '' )
        text.gsub!( /\n{3,}/, "\n\n" )
        text.gsub!( /"$/, "\" " )

        # if entire document is indented, flush
        # to the left side
        flush_left text
    end

    def flush_left( text )
        indt = 0
        if text =~ /^ /
            while text !~ /^ {#{indt}}\S/
                indt += 1
            end unless text.empty?
            if indt.nonzero?
                text.gsub!( /^ {#{indt}}/, '' )
            end
        end
    end

    def footnote_ref( text ) 
        text.gsub!( /\b\[([0-9]+?)\](\s)?/,
            '<sup><a href="#fn\1">\1</a></sup>\2' )
    end
    
    OFFTAGS = /(code|pre|kbd|notextile)/
    OFFTAG_MATCH = /(?:(<\/#{ OFFTAGS }>)|(<#{ OFFTAGS }[^>]*>))(.*?)(?=<\/?#{ OFFTAGS }\W|\Z)/mi
    OFFTAG_OPEN = /<#{ OFFTAGS }/
    OFFTAG_CLOSE = /<\/?#{ OFFTAGS }/
    HASTAG_MATCH = /(<\/?\w[^\n]*?>)/m
    ALLTAG_MATCH = /(<\/?\w[^\n]*?>)|.*?(?=<\/?\w[^\n]*?>|$)/m

    def glyphs_textile( text, level = 0 )
        if text !~ HASTAG_MATCH
            pgl text
            footnote_ref text
        else
            codepre = 0
            text.gsub!( ALLTAG_MATCH ) do |line|
                ## matches are off if we're between <code>, <pre> etc.
                if $1
                    if line =~ OFFTAG_OPEN
                        codepre += 1
                    elsif line =~ OFFTAG_CLOSE
                        codepre -= 1
                        codepre = 0 if codepre < 0
                    end 
                elsif codepre.zero?
                    glyphs_textile( line, level + 1 )
                else
                    htmlesc( line, :NoQuotes )
                end
                # p [level, codepre, line]

                line
            end
        end
    end

    def rip_offtags( text, escape_aftertag=true )
        if text =~ /<.*>/
            ## strip and encode <pre> content
            codepre, used_offtags = 0, {}
            text.gsub!( OFFTAG_MATCH ) do |line|
                if $3
                    first, offtag, aftertag = $3, $4, $5
                    codepre += 1
                    used_offtags[offtag] = true
                    if codepre - used_offtags.length > 0
                        htmlesc( line, :NoQuotes )
                        @pre_list.last << line
                        line = ""
                    else
                        ### htmlesc is disabled between CODE tags which will be parsed with highlighter
                        ### Regexp in formatter.rb is : /<code\s+class="(\w+)">\s?(.+)/m
                        ### NB: some changes were made not to use $N variables, because we use "match"
                        ###   and it breaks following lines
                        htmlesc( aftertag, :NoQuotes ) if aftertag && escape_aftertag && !first.match(/<code\s+class="(\w+)">/)
                        line = "<redpre##{ @pre_list.length }>"
                        first.match(/<#{ OFFTAGS }([^>]*)>/)
                        tag = $1
                        $2.to_s.match(/(class\=\S+)/i)
                        tag << " #{$1}" if $1
                        @pre_list << "<#{ tag }>#{ aftertag }"
                    end
                elsif $1 and codepre > 0
                    if codepre - used_offtags.length > 0
                        htmlesc( line, :NoQuotes )
                        @pre_list.last << line
                        line = ""
                    end
                    codepre -= 1 unless codepre.zero?
                    used_offtags = {} if codepre.zero?
                end 
                line
            end
        end
        text
    end

    def smooth_offtags( text )
        unless @pre_list.empty?
            ## replace <pre> content
            text.gsub!( /<redpre#(\d+)>/ ) { @pre_list[$1.to_i] }
        end
    end

    def inline( text ) 
        [/^inline_/, /^glyphs_/].each do |meth_re|
            @rules.each do |rule_name|
                method( rule_name ).call( text ) if rule_name.to_s.match( meth_re )
            end
        end
    end

    def h_align( text ) 
        H_ALGN_VALS[text]
    end

    def v_align( text ) 
        V_ALGN_VALS[text]
    end

    def textile_popup_help( name, windowW, windowH )
        ' <a target="_blank" href="http://hobix.com/textile/#' + helpvar + '" onclick="window.open(this.href, \'popupwindow\', \'width=' + windowW + ',height=' + windowH + ',scrollbars,resizable\'); return false;">' + name + '</a><br />'
    end

    # HTML cleansing stuff
    BASIC_TAGS = {
        'a' => ['href', 'title'],
        'img' => ['src', 'alt', 'title'],
        'br' => [],
        'i' => nil,
        'u' => nil, 
        'b' => nil,
        'pre' => nil,
        'kbd' => nil,
        'code' => ['lang'],
        'cite' => nil,
        'strong' => nil,
        'em' => nil,
        'ins' => nil,
        'sup' => nil,
        'sub' => nil,
        'del' => nil,
        'table' => nil,
        'tr' => nil,
        'td' => ['colspan', 'rowspan'],
        'th' => nil,
        'ol' => nil,
        'ul' => nil,
        'li' => nil,
        'p' => nil,
        'h1' => nil,
        'h2' => nil,
        'h3' => nil,
        'h4' => nil,
        'h5' => nil,
        'h6' => nil, 
        'blockquote' => ['cite']
    }

    def clean_html( text, tags = BASIC_TAGS )
        text.gsub!( /<!\[CDATA\[/, '' )
        text.gsub!( /<(\/*)(\w+)([^>]*)>/ ) do
            raw = $~
            tag = raw[2].downcase
            if tags.has_key? tag
                pcs = [tag]
                tags[tag].each do |prop|
                    ['"', "'", ''].each do |q|
                        q2 = ( q != '' ? q : '\s' )
                        if raw[3] =~ /#{prop}\s*=\s*#{q}([^#{q2}]+)#{q}/i
                            attrv = $1
                            next if prop == 'src' and attrv =~ %r{^(?!http)\w+:}
                            pcs << "#{prop}=\"#{$1.gsub('"', '\\"')}\""
                            break
                        end
                    end
                end if tags[tag]
                "<#{raw[1]}#{pcs.join " "}>"
            else
                " "
            end
        end
    end
    
    ALLOWED_TAGS = %w(redpre pre code notextile)
    
    def escape_html_tags(text)
      text.gsub!(%r{<(\/?([!\w]+)[^<>\n]*)(>?)}) {|m| ALLOWED_TAGS.include?($2) ? "<#{$1}#{$3}" : "&lt;#{$1}#{'&gt;' unless $3.blank?}" }
    end
end

# Redmine - project management software
# Copyright (C) 2006-2008  Jean-Philippe Lang
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

module Redmine
  module WikiFormatting
    module Textile
      class Formatter < RedCloth3
        include ActionView::Helpers::TagHelper
        
        # auto_link rule after textile rules so that it doesn't break !image_url! tags
        RULES = [:textile, :block_markdown_rule, :inline_auto_link, :inline_auto_mailto, :inline_toc] 
        
        def initialize(*args)
          super
          self.hard_breaks=true
          self.no_span_caps=true
          self.filter_styles=true
        end
        
        def to_html(*rules)
          @toc = []
          super(*RULES).to_s
        end
        
      private
  
        # Patch for RedCloth.  Fixed in RedCloth r128 but _why hasn't released it yet.
        # <a href="http://code.whytheluckystiff.net/redcloth/changeset/128">http://code.whytheluckystiff.net/redcloth/changeset/128</a>
        def hard_break( text ) 
          text.gsub!( /(.)\n(?!\n|\Z|>| *([#*=]+(\s|$)|[{|]))/, "\\1<br />" ) if hard_breaks
        end
        
        # Patch to add code highlighting support to RedCloth
        def smooth_offtags( text )
          unless @pre_list.empty?
            ## replace <pre> content
            text.gsub!(/<redpre#(\d+)>/) do
              content = @pre_list[$1.to_i]
              if content.match(/<code\s+class="(\w+)">\s?(.+)/m)
                content = "<code class=\"#{$1} syntaxhl\">" + 
                  Redmine::SyntaxHighlighting.highlight_by_language($2, $1)
              end
              content
            end
          end
        end
        
        # Patch to add 'table of content' support to RedCloth
        def textile_p_withtoc(tag, atts, cite, content)
          # removes wiki links from the item
          toc_item = content.gsub(/(\[\[([^\]\|]*)(\|([^\]]*))?\]\])/) { $4 || $2 }
          # sanitizes titles from links
          # see redcloth3.rb, same as "#{pre}#{text}#{post}"
          toc_item.gsub!(LINK_RE) { [$2, $4, $9].join }
          # sanitizes image links from titles
          toc_item.gsub!(IMAGE_RE) { [$5].join }
          # removes styles
          # eg. %{color:red}Triggers% => Triggers
          toc_item.gsub! %r[%\{[^\}]*\}([^%]+)%], '\\1'
          
          # replaces non word caracters by dashes
          anchor = toc_item.gsub(%r{[^\w\s\-]}, '').gsub(%r{\s+(\-+\s*)?}, '-')
  
          unless anchor.blank?
            if tag =~ /^h(\d)$/
              @toc << [$1.to_i, anchor, toc_item]
            end
            atts << " id=\"#{anchor}\""
            content = content + "<a href=\"##{anchor}\" class=\"wiki-anchor\">&para;</a>"
          end
          textile_p(tag, atts, cite, content)
        end
  
        alias :textile_h1 :textile_p_withtoc
        alias :textile_h2 :textile_p_withtoc
        alias :textile_h3 :textile_p_withtoc
        
        def inline_toc(text)
          text.gsub!(/<p>\{\{([<>]?)toc\}\}<\/p>/i) do
            div_class = 'toc'
            div_class << ' right' if $1 == '>'
            div_class << ' left' if $1 == '<'
            out = "<ul class=\"#{div_class}\">"
            @toc.each do |heading|
              level, anchor, toc_item = heading
              out << "<li class=\"heading#{level}\"><a href=\"##{anchor}\">#{toc_item}</a></li>\n"
            end
            out << '</ul>'
            out
          end
        end
        
        AUTO_LINK_RE = %r{
                        (                          # leading text
                          <\w+.*?>|                # leading HTML tag, or
                          [^=<>!:'"/]|             # leading punctuation, or 
                          ^                        # beginning of line
                        )
                        (
                          (?:https?://)|           # protocol spec, or
                          (?:s?ftps?://)|
                          (?:www\.)                # www.*
                        )
                        (
                          (\S+?)                   # url
                          (\/)?                    # slash
                        )
                        ((?:&gt;)?|[^\w\=\/;\(\)]*?)               # post
                        (?=<|\s|$)
                       }x unless const_defined?(:AUTO_LINK_RE)
  
        # Turns all urls into clickable links (code from Rails).
        def inline_auto_link(text)
          text.gsub!(AUTO_LINK_RE) do
            all, leading, proto, url, post = $&, $1, $2, $3, $6
            if leading =~ /<a\s/i || leading =~ /![<>=]?/
              # don't replace URL's that are already linked
              # and URL's prefixed with ! !> !< != (textile images)
              all
            else
              # Idea below : an URL with unbalanced parethesis and
              # ending by ')' is put into external parenthesis
              if ( url[-1]==?) and ((url.count("(") - url.count(")")) < 0 ) )
                url=url[0..-2] # discard closing parenth from url
                post = ")"+post # add closing parenth to post
              end
              tag = content_tag('a', proto + url, :href => "#{proto=="www."?"http://www.":proto}#{url}", :class => 'external')
              %(#{leading}#{tag}#{post})
            end
          end
        end
  
        # Turns all email addresses into clickable links (code from Rails).
        def inline_auto_mailto(text)
          text.gsub!(/([\w\.!#\$%\-+.]+@[A-Za-z0-9\-]+(\.[A-Za-z0-9\-]+)+)/) do
            mail = $1
            if text.match(/<a\b[^>]*>(.*)(#{Regexp.escape(mail)})(.*)<\/a>/)
              mail
            else
              content_tag('a', mail, :href => "mailto:#{mail}", :class => "email")
            end
          end
        end
      end
    end
  end
end
# Redmine - project management software
# Copyright (C) 2006-2010  Jean-Philippe Lang
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

module Redmine
  module SyntaxHighlighting
    
    class << self
      attr_reader :highlighter
      delegate :highlight_by_filename, :highlight_by_language, :to => :highlighter
      
      def highlighter=(name)
        if name.is_a?(Module)
          @highlighter = name
        else
          @highlighter = const_get(name)
        end
      end
    end
    
    module CodeRay
      require 'coderay'
      require 'coderay/helpers/file_type'
      
      class << self
        # Highlights +text+ as the content of +filename+
        # Should not return line numbers nor outer pre tag
        def highlight_by_filename(text, filename)
          language = ::CodeRay::FileType[filename]
          language ? ::CodeRay.scan(text, language).html : ERB::Util.h(text)
        end
        
        # Highlights +text+ using +language+ syntax
        # Should not return outer pre tag
        def highlight_by_language(text, language)
          ::CodeRay.scan(text, language).html(:line_numbers => :inline, :wrap => :span)
        end
      end
    end
  end
  
  SyntaxHighlighting.highlighter = 'CodeRay'
end


application_css = <<'EOF'
body { font-family: Verdana, sans-serif; font-size: 12px; color:#484848; margin: 0; padding: 0; min-width: 900px; }

h1, h2, h3, h4 { font-family: "Trebuchet MS", Verdana, sans-serif;}
h1 {margin:0; padding:0; font-size: 24px;}
h2, .wiki h1 {font-size: 20px;padding: 2px 10px 1px 0px;margin: 0 0 10px 0; border-bottom: 1px solid #bbbbbb; color: #444;}
h3, .wiki h2 {font-size: 16px;padding: 2px 10px 1px 0px;margin: 0 0 10px 0; border-bottom: 1px solid #bbbbbb; color: #444;}
h4, .wiki h3 {font-size: 13px;padding: 2px 10px 1px 0px;margin-bottom: 5px; border-bottom: 1px dotted #bbbbbb; color: #444;}

/***** Layout *****/
#wrapper {background: white;}

#top-menu {background: #2C4056; color: #fff; height:1.8em; font-size: 0.8em; padding: 2px 2px 0px 6px;}
#top-menu ul {margin: 0;  padding: 0;}
#top-menu li {
  float:left;
  list-style-type:none;
  margin: 0px 0px 0px 0px;
  padding: 0px 0px 0px 0px;
  white-space:nowrap;
}
#top-menu a {color: #fff; margin-right: 8px; font-weight: bold;}
#top-menu #loggedas { float: right; margin-right: 0.5em; color: #fff; }

#account {float:right;}

#header {height:5.3em;margin:0;background-color:#507AAA;color:#f8f8f8; padding: 4px 8px 0px 6px; position:relative;}
#header a {color:#f8f8f8;}
#header h1 a.ancestor { font-size: 80%; }
#quick-search {float:right;}

#main-menu {position: absolute;  bottom: 0px;  left:6px; margin-right: -500px;}
#main-menu ul {margin: 0;  padding: 0;}
#main-menu li {
  float:left;
  list-style-type:none;
  margin: 0px 2px 0px 0px;
  padding: 0px 0px 0px 0px;
  white-space:nowrap;
}
#main-menu li a {
  display: block;
  color: #fff;
  text-decoration: none;
  font-weight: bold;
  margin: 0;
  padding: 4px 10px 4px 10px;
}
#main-menu li a:hover {background:#759FCF; color:#fff;}
#main-menu li a.selected, #main-menu li a.selected:hover {background:#fff; color:#555;}

#admin-menu ul {margin: 0;  padding: 0;}
#admin-menu li {margin: 0;  padding: 0 0 12px 0; list-style-type:none;}

#admin-menu a { background-position: 0% 40%; background-repeat: no-repeat; padding-left: 20px; padding-top: 2px; padding-bottom: 3px;}
#admin-menu a.projects { background-image: url(../images/projects.png); }
#admin-menu a.users { background-image: url(../images/user.png); }
#admin-menu a.groups { background-image: url(../images/group.png); }
#admin-menu a.roles { background-image: url(../images/database_key.png); }
#admin-menu a.trackers { background-image: url(../images/ticket.png); }
#admin-menu a.issue_statuses { background-image: url(../images/ticket_edit.png); }
#admin-menu a.workflows { background-image: url(../images/ticket_go.png); }
#admin-menu a.custom_fields { background-image: url(../images/textfield.png); }
#admin-menu a.enumerations { background-image: url(../images/text_list_bullets.png); }
#admin-menu a.settings { background-image: url(../images/changeset.png); }
#admin-menu a.plugins { background-image: url(../images/plugin.png); }
#admin-menu a.info { background-image: url(../images/help.png); }
#admin-menu a.server_authentication { background-image: url(../images/server_key.png); }

#main {background-color:#EEEEEE;}

#sidebar{ float: right; width: 22%; position: relative; z-index: 9; padding: 0; margin: 0;}
* html #sidebar{ width: 22%; }
#sidebar h3{ font-size: 14px; margin-top:14px; color: #666;  }
#sidebar hr{ width: 100%; margin: 0 auto; height: 1px; background: #ccc; border: 0; }
* html #sidebar hr{ width: 95%; position: relative; left: -6px; color: #ccc; }
#sidebar .contextual { margin-right: 1em; }

#content { width: 75%; background-color: #fff; margin: 0px; border-right: 1px solid #ddd; padding: 6px 10px 10px 10px; z-index: 10; }
* html #content{ width: 75%; padding-left: 0; margin-top: 0px; padding: 6px 10px 10px 10px;}
html>body #content { min-height: 600px; } 
* html body #content { height: 600px; } /* IE */

#main.nosidebar #sidebar{ display: none; }
#main.nosidebar #content{ width: auto; border-right: 0; }

#footer {clear: both; border-top: 1px solid #bbb; font-size: 0.9em; color: #aaa; padding: 5px; text-align:center; background:#fff;}

#login-form table {margin-top:5em; padding:1em; margin-left: auto; margin-right: auto; border: 2px solid #FDBF3B; background-color:#FFEBC1; }
#login-form table td {padding: 6px;}
#login-form label {font-weight: bold;}
#login-form input#username, #login-form input#password { width: 300px; }

input#openid_url { background: url(../images/openid-bg.gif) no-repeat; background-color: #fff; background-position: 0 50%; padding-left: 18px; }

.clear:after{ content: "."; display: block; height: 0; clear: both; visibility: hidden; }

/***** Links *****/
a, a:link, a:visited{ color: #2A5685; text-decoration: none; }
a:hover, a:active{ color: #c61a1a; text-decoration: underline;}
a img{ border: 0; }

a.issue.closed, a.issue.closed:link, a.issue.closed:visited { color: #999; text-decoration: line-through; }

/***** Tables *****/
table.list { border: 1px solid #e4e4e4;  border-collapse: collapse; width: 100%; margin-bottom: 4px; }
table.list th {  background-color:#EEEEEE; padding: 4px; white-space:nowrap; }
table.list td { vertical-align: top; }
table.list td.id { width: 2%; text-align: center;}
table.list td.checkbox { width: 15px; padding: 0px;}
table.list td.buttons { width: 15%; white-space:nowrap; text-align: right; }
table.list td.buttons a { padding-right: 0.6em; }
table.list caption { text-align: left; padding: 0.5em 0.5em 0.5em 0; }

tr.project td.name a { white-space:nowrap; }

tr.project.idnt td.name a {background: url(../images/bullet_arrow_right.png) no-repeat 0 50%; padding-left: 16px;}
tr.project.idnt-1 td.name {padding-left: 0.5em;}
tr.project.idnt-2 td.name {padding-left: 2em;}
tr.project.idnt-3 td.name {padding-left: 3.5em;}
tr.project.idnt-4 td.name {padding-left: 5em;}
tr.project.idnt-5 td.name {padding-left: 6.5em;}
tr.project.idnt-6 td.name {padding-left: 8em;}
tr.project.idnt-7 td.name {padding-left: 9.5em;}
tr.project.idnt-8 td.name {padding-left: 11em;}
tr.project.idnt-9 td.name {padding-left: 12.5em;}

tr.issue { text-align: center; white-space: nowrap; }
tr.issue td.subject, tr.issue td.category, td.assigned_to { white-space: normal; }
tr.issue td.subject { text-align: left; }
tr.issue td.done_ratio table.progress { margin-left:auto; margin-right: auto;}

tr.issue.idnt td.subject a {background: url(../images/bullet_arrow_right.png) no-repeat 0 50%; padding-left: 16px;}
tr.issue.idnt-1 td.subject {padding-left: 0.5em;}
tr.issue.idnt-2 td.subject {padding-left: 2em;}
tr.issue.idnt-3 td.subject {padding-left: 3.5em;}
tr.issue.idnt-4 td.subject {padding-left: 5em;}
tr.issue.idnt-5 td.subject {padding-left: 6.5em;}
tr.issue.idnt-6 td.subject {padding-left: 8em;}
tr.issue.idnt-7 td.subject {padding-left: 9.5em;}
tr.issue.idnt-8 td.subject {padding-left: 11em;}
tr.issue.idnt-9 td.subject {padding-left: 12.5em;}

tr.entry { border: 1px solid #f8f8f8; }
tr.entry td { white-space: nowrap; }
tr.entry td.filename { width: 30%; }
tr.entry td.size { text-align: right; font-size: 90%; }
tr.entry td.revision, tr.entry td.author { text-align: center; }
tr.entry td.age { text-align: right; }
tr.entry.file td.filename a { margin-left: 16px; }

tr span.expander {background-image: url(../images/bullet_toggle_plus.png); padding-left: 8px; margin-left: 0; cursor: pointer;}
tr.open span.expander {background-image: url(../images/bullet_toggle_minus.png);}

tr.changeset td.author { text-align: center; width: 15%; }
tr.changeset td.committed_on { text-align: center; width: 15%; }

table.files tr.file td { text-align: center; }
table.files tr.file td.filename { text-align: left; padding-left: 24px; }
table.files tr.file td.digest { font-size: 80%; }

table.members td.roles, table.memberships td.roles { width: 45%; }

tr.message { height: 2.6em; }
tr.message td.subject { padding-left: 20px; }
tr.message td.created_on { white-space: nowrap; }
tr.message td.last_message { font-size: 80%; white-space: nowrap; }
tr.message.locked td.subject { background: url(../images/locked.png) no-repeat 0 1px; }
tr.message.sticky td.subject { background: url(../images/bullet_go.png) no-repeat 0 1px; font-weight: bold; }

tr.version.closed, tr.version.closed a { color: #999; }
tr.version td.name { padding-left: 20px; }
tr.version.shared td.name { background: url(../images/link.png) no-repeat 0% 70%; }
tr.version td.date, tr.version td.status, tr.version td.sharing { text-align: center; }

tr.user td { width:13%; }
tr.user td.email { width:18%; }
tr.user td { white-space: nowrap; }
tr.user.locked, tr.user.registered { color: #aaa; }
tr.user.locked a, tr.user.registered a { color: #aaa; }

tr.time-entry { text-align: center; white-space: nowrap; }
tr.time-entry td.subject, tr.time-entry td.comments { text-align: left; white-space: normal; }
td.hours { text-align: right; font-weight: bold; padding-right: 0.5em; }
td.hours .hours-dec { font-size: 0.9em; }

table.plugins td { vertical-align: middle; }
table.plugins td.configure { text-align: right; padding-right: 1em; }
table.plugins span.name { font-weight: bold; display: block; margin-bottom: 6px; }
table.plugins span.description { display: block; font-size: 0.9em; }
table.plugins span.url { display: block; font-size: 0.9em; }

table.list tbody tr.group td { padding: 0.8em 0 0.5em 0.3em; font-weight: bold; border-bottom: 1px solid #ccc; }
table.list tbody tr.group span.count { color: #aaa; font-size: 80%; }

table.list tbody tr:hover { background-color:#ffffdd; }
table.list tbody tr.group:hover { background-color:inherit; }
table td {padding:2px;}
table p {margin:0;}
.odd {background-color:#f6f7f8;}
.even {background-color: #fff;}

a.sort { padding-right: 16px; background-position: 100% 50%; background-repeat: no-repeat; }
a.sort.asc  { background-image: url(../images/sort_asc.png); }
a.sort.desc { background-image: url(../images/sort_desc.png); }

table.attributes { width: 100% }
table.attributes th { vertical-align: top; text-align: left; }
table.attributes td { vertical-align: top; }

table.boards a.board, h3.comments { background: url(../images/comment.png) no-repeat 0% 50%; padding-left: 20px; }

td.center {text-align:center;}

h3.version { background: url(../images/package.png) no-repeat 0% 50%; padding-left: 20px; }

div.issues h3 { background: url(../images/ticket.png) no-repeat 0% 50%; padding-left: 20px; }
div.members h3 { background: url(../images/group.png) no-repeat 0% 50%; padding-left: 20px; }
div.news h3 { background: url(../images/news.png) no-repeat 0% 50%; padding-left: 20px; }
div.projects h3 { background: url(../images/projects.png) no-repeat 0% 50%; padding-left: 20px; }

#watchers ul {margin: 0;  padding: 0;}
#watchers li {list-style-type:none;margin: 0px 2px 0px 0px; padding: 0px 0px 0px 0px;}
#watchers select {width: 95%; display: block;}
#watchers a.delete {opacity: 0.4;}
#watchers a.delete:hover {opacity: 1;}
#watchers img.gravatar {vertical-align: middle;margin: 0 4px 2px 0;}

.highlight { background-color: #FCFD8D;}
.highlight.token-1 { background-color: #faa;}
.highlight.token-2 { background-color: #afa;}
.highlight.token-3 { background-color: #aaf;}

.box{
padding:6px;
margin-bottom: 10px;
background-color:#f6f6f6;
color:#505050;
line-height:1.5em;
border: 1px solid #e4e4e4;
}

div.square {
 border: 1px solid #999;
 float: left;
 margin: .3em .4em 0 .4em;
 overflow: hidden;
 width: .6em; height: .6em;
}
.contextual {float:right; white-space: nowrap; line-height:1.4em;margin-top:5px; padding-left: 10px; font-size:0.9em;}
.contextual input, .contextual select {font-size:0.9em;}
.message .contextual { margin-top: 0; }

.splitcontentleft{float:left; width:49%;}
.splitcontentright{float:right; width:49%;}
form {display: inline;}
input, select {vertical-align: middle; margin-top: 1px; margin-bottom: 1px;}
fieldset {border: 1px solid #e4e4e4; margin:0;}
legend {color: #484848;}
hr { width: 100%; height: 1px; background: #ccc; border: 0;}
blockquote { font-style: italic; border-left: 3px solid #e0e0e0; padding-left: 0.6em; margin-left: 2.4em;}
blockquote blockquote { margin-left: 0;}
acronym  { border-bottom: 1px dotted; cursor: help; }
textarea.wiki-edit { width: 99%; }
li p {margin-top: 0;}
div.issue {background:#ffffdd; padding:6px; margin-bottom:6px;border: 1px solid #d7d7d7;}
p.breadcrumb { font-size: 0.9em; margin: 4px 0 4px 0;}
p.subtitle { font-size: 0.9em; margin: -6px 0 12px 0; font-style: italic; } 
p.footnote { font-size: 0.9em; margin-top: 0px; margin-bottom: 0px; }

div.issue div.subject div div { padding-left: 16px; }
div.issue div.subject p {margin: 0; margin-bottom: 0.1em; font-size: 90%; color: #999;}
div.issue div.subject>div>p { margin-top: 0.5em; }
div.issue div.subject h3 {margin: 0; margin-bottom: 0.1em;}

#issue_tree table.issues { border: 0; }
#issue_tree td.checkbox {display:none;}

fieldset.collapsible { border-width: 1px 0 0 0; font-size: 0.9em; }
fieldset.collapsible legend { padding-left: 16px; background: url(../images/arrow_expanded.png) no-repeat 0% 40%; cursor:pointer; }
fieldset.collapsible.collapsed legend { background-image: url(../images/arrow_collapsed.png); }

fieldset#date-range p { margin: 2px 0 2px 0; }
fieldset#filters table { border-collapse: collapse; }
fieldset#filters table td { padding: 0; vertical-align: middle; }
fieldset#filters tr.filter { height: 2em; }
fieldset#filters td.add-filter { text-align: right; vertical-align: top; }
.buttons { font-size: 0.9em; margin-bottom: 1.4em; margin-top: 1em; }

div#issue-changesets {float:right; width:45%; margin-left: 1em; margin-bottom: 1em; background: #fff; padding-left: 1em; font-size: 90%;}
div#issue-changesets div.changeset { padding: 4px;}
div#issue-changesets div.changeset { border-bottom: 1px solid #ddd; }
div#issue-changesets p { margin-top: 0; margin-bottom: 1em;}

div#activity dl, #search-results { margin-left: 2em; }
div#activity dd, #search-results dd { margin-bottom: 1em; padding-left: 18px; font-size: 0.9em; }
div#activity dt, #search-results dt { margin-bottom: 0px; padding-left: 20px; line-height: 18px; background-position: 0 50%; background-repeat: no-repeat; }
div#activity dt.me .time { border-bottom: 1px solid #999; }
div#activity dt .time { color: #777; font-size: 80%; }
div#activity dd .description, #search-results dd .description { font-style: italic; }
div#activity span.project:after, #search-results span.project:after { content: " -"; }
div#activity dd span.description, #search-results dd span.description { display:block; color: #808080; }

#search-results dd { margin-bottom: 1em; padding-left: 20px; margin-left:0px; }

div#search-results-counts {float:right;}
div#search-results-counts ul { margin-top: 0.5em; }
div#search-results-counts  li { list-style-type:none; float: left; margin-left: 1em; }
  
dt.issue { background-image: url(../images/ticket.png); }
dt.issue-edit { background-image: url(../images/ticket_edit.png); }
dt.issue-closed { background-image: url(../images/ticket_checked.png); }
dt.issue-note { background-image: url(../images/ticket_note.png); }
dt.changeset { background-image: url(../images/changeset.png); }
dt.news { background-image: url(../images/news.png); }
dt.message { background-image: url(../images/message.png); }
dt.reply { background-image: url(../images/comments.png); }
dt.wiki-page { background-image: url(../images/wiki_edit.png); }
dt.attachment { background-image: url(../images/attachment.png); }
dt.document { background-image: url(../images/document.png); }
dt.project { background-image: url(../images/projects.png); }
dt.time-entry { background-image: url(../images/time.png); }

#search-results dt.issue.closed { background-image: url(../images/ticket_checked.png); }

div#roadmap .related-issues { margin-bottom: 1em; }
div#roadmap .related-issues td.checkbox { display: none; }
div#roadmap .wiki h1:first-child { display: none; }
div#roadmap .wiki h1 { font-size: 120%; }
div#roadmap .wiki h2 { font-size: 110%; }

div#version-summary { float:right; width:380px; margin-left: 16px; margin-bottom: 16px; background-color: #fff; }
div#version-summary fieldset { margin-bottom: 1em; }
div#version-summary .total-hours { text-align: right; }

table#time-report td.hours, table#time-report th.period, table#time-report th.total { text-align: right; padding-right: 0.5em; }
table#time-report tbody tr { font-style: italic; color: #777; }
table#time-report tbody tr.last-level { font-style: normal; color: #555; }
table#time-report tbody tr.total { font-style: normal; font-weight: bold; color: #555; background-color:#EEEEEE; }
table#time-report .hours-dec { font-size: 0.9em; }

form .attributes { margin-bottom: 8px; }
form .attributes p { padding-top: 1px; padding-bottom: 2px; }
form .attributes select { min-width: 50%; }

ul.projects { margin: 0; padding-left: 1em; }
ul.projects.root { margin: 0;  padding: 0; }
ul.projects ul.projects { border-left: 3px solid #e0e0e0; }
ul.projects li.root { list-style-type:none; margin-bottom: 1em; }
ul.projects li.child { list-style-type:none; margin-top: 1em;}
ul.projects div.root a.project { font-family: "Trebuchet MS", Verdana, sans-serif; font-weight: bold; font-size: 16px; margin: 0 0 10px 0; }
.my-project { padding-left: 18px; background: url(../images/fav.png) no-repeat 0 50%; }

#tracker_project_ids ul { margin: 0;  padding-left: 1em; }
#tracker_project_ids li { list-style-type:none; } 

ul.properties {padding:0; font-size: 0.9em; color: #777;}
ul.properties li {list-style-type:none;}
ul.properties li span {font-style:italic;}

.total-hours { font-size: 110%; font-weight: bold; }
.total-hours span.hours-int { font-size: 120%; }

.autoscroll {overflow-x: auto; padding:1px; margin-bottom: 1.2em;}
#user_firstname, #user_lastname, #user_mail, #my_account_form select { width: 90%; }

#workflow_copy_form select { width: 200px; }

.pagination {font-size: 90%}
p.pagination {margin-top:8px;}

/***** Tabular forms ******/
.tabular p{
margin: 0;
padding: 5px 0 8px 0;
padding-left: 180px; /*width of left column containing the label elements*/
height: 1%;
clear:left;
}

html>body .tabular p {overflow:hidden;}

.tabular label{
font-weight: bold;
float: left;
text-align: right;
margin-left: -180px; /*width of left column*/
width: 175px; /*width of labels. Should be smaller than left column to create some right 
margin*/
}

.tabular label.floating{
font-weight: normal;
margin-left: 0px;
text-align: left;
width: 270px;
}

.tabular label.block{
font-weight: normal;
margin-left: 0px !important;
text-align: left;
float: none;
display: block;
width: auto;
}

.tabular label.inline{
float:none;
margin-left: 5px !important;
width: auto;
}

input#time_entry_comments { width: 90%;}

#preview fieldset {margin-top: 1em; background: url(../images/draft.png)}

.tabular.settings p{ padding-left: 300px; }
.tabular.settings label{ margin-left: -300px; width: 295px; }
.tabular.settings textarea { width: 99%; }

fieldset.settings label { display: block; }

.required {color: #bb0000;}
.summary {font-style: italic;}

#attachments_fields input[type=text] {margin-left: 8px; }

div.attachments { margin-top: 12px; }
div.attachments p { margin:4px 0 2px 0; }
div.attachments img { vertical-align: middle; }
div.attachments span.author { font-size: 0.9em; color: #888; }

p.other-formats { text-align: right; font-size:0.9em; color: #666; }
.other-formats span + span:before { content: "| "; }

a.atom { background: url(../images/feed.png) no-repeat 1px 50%; padding: 2px 0px 3px 16px; }

/* Project members tab */
div#tab-content-members .splitcontentleft, div#tab-content-memberships .splitcontentleft, div#tab-content-users .splitcontentleft { width: 64% }
div#tab-content-members .splitcontentright, div#tab-content-memberships .splitcontentright, div#tab-content-users .splitcontentright { width: 34% }
div#tab-content-members fieldset, div#tab-content-memberships fieldset, div#tab-content-users fieldset { padding:1em; margin-bottom: 1em; }
div#tab-content-members fieldset legend, div#tab-content-memberships fieldset legend, div#tab-content-users fieldset legend { font-weight: bold; }
div#tab-content-members fieldset label, div#tab-content-memberships fieldset label, div#tab-content-users fieldset label { display: block; }
div#tab-content-members fieldset div, div#tab-content-users fieldset div { max-height: 400px; overflow:auto; }

table.members td.group { padding-left: 20px; background: url(../images/group.png) no-repeat 0% 50%; }

input#principal_search, input#user_search {width:100%}

* html div#tab-content-members fieldset div { height: 450px; }

/***** Flash & error messages ****/
#errorExplanation, div.flash, .nodata, .warning {
    padding: 4px 4px 4px 30px;
    margin-bottom: 12px;
	font-size: 1.1em;
	border: 2px solid;
}

div.flash {margin-top: 8px;}

div.flash.error, #errorExplanation {
	background: url(../images/exclamation.png) 8px 50% no-repeat;
	background-color: #ffe3e3;
	border-color: #dd0000;
	color: #880000;
}

div.flash.notice {
    background: url(../images/true.png) 8px 5px no-repeat;
	background-color: #dfffdf;
	border-color: #9fcf9f;
	color: #005f00;
}

div.flash.warning {
  background: url(../images/warning.png) 8px 5px no-repeat;
	background-color: #FFEBC1;
	border-color: #FDBF3B;
	color: #A6750C;
  text-align: left;
}

.nodata, .warning {
    text-align: center;
	background-color: #FFEBC1;
	border-color: #FDBF3B;
	color: #A6750C;
}

#errorExplanation ul { font-size: 0.9em;}
#errorExplanation h2, #errorExplanation p { display: none; }

/***** Ajax indicator ******/
#ajax-indicator {
position: absolute; /* fixed not supported by IE */
background-color:#eee;
border: 1px solid #bbb;
top:35%;
left:40%;
width:20%;
font-weight:bold;
text-align:center;
padding:0.6em;
z-index:100;
filter:alpha(opacity=50);
opacity: 0.5;
}

html>body #ajax-indicator { position: fixed; }

#ajax-indicator span {
background-position: 0% 40%;
background-repeat: no-repeat;
background-image: url(../images/loading.gif);
padding-left: 26px;
vertical-align: bottom;
}

/***** Calendar *****/
table.cal {border-collapse: collapse; width: 100%; margin: 0px 0 6px 0;border: 1px solid #d7d7d7;}
table.cal thead th {width: 14%; background-color:#EEEEEE; padding: 4px; }
table.cal thead th.week-number {width: auto;}
table.cal tbody tr {height: 100px;}
table.cal td {border: 1px solid #d7d7d7; vertical-align: top; font-size: 0.9em;}
table.cal td.week-number { background-color:#EEEEEE; padding: 4px; border:none; font-size: 1em;}
table.cal td p.day-num {font-size: 1.1em; text-align:right;}
table.cal td.odd p.day-num {color: #bbb;}
table.cal td.today {background:#ffffdd;}
table.cal td.today p.day-num {font-weight: bold;}
table.cal .starting a, p.cal.legend .starting {background: url(../images/bullet_go.png) no-repeat -1px -2px; padding-left:16px;}
table.cal .ending a, p.cal.legend .ending {background: url(../images/bullet_end.png) no-repeat -1px -2px; padding-left:16px;}
table.cal .starting.ending a, p.cal.legend .starting.ending {background: url(../images/bullet_diamond.png) no-repeat -1px -2px; padding-left:16px;}
p.cal.legend span {display:block;}

/***** Tooltips ******/
.tooltip{position:relative;z-index:24;}
.tooltip:hover{z-index:25;color:#000;}
.tooltip span.tip{display: none; text-align:left;}

div.tooltip:hover span.tip{
display:block;
position:absolute;
top:12px; left:24px; width:270px;
border:1px solid #555;
background-color:#fff;
padding: 4px;
font-size: 0.8em;
color:#505050;
}

/***** Progress bar *****/
table.progress {
    border: 1px solid #D7D7D7;
    border-collapse: collapse;
    border-spacing: 0pt;
    empty-cells: show;
    text-align: center;
    float:left;
    margin: 1px 6px 1px 0px;
}

table.progress td { height: 0.9em; }
table.progress td.closed { background: #BAE0BA none repeat scroll 0%; }
table.progress td.done { background: #DEF0DE none repeat scroll 0%; }
table.progress td.open { background: #FFF none repeat scroll 0%; }
p.pourcent {font-size: 80%;}
p.progress-info {clear: left; font-style: italic; font-size: 80%;}

/***** Tabs *****/
#content .tabs {height: 2.6em; margin-bottom:1.2em; position:relative; overflow:hidden;}
#content .tabs ul {margin:0; position:absolute; bottom:0; padding-left:1em; width: 2000px; border-bottom: 1px solid #bbbbbb;}
#content .tabs ul li {
float:left;
list-style-type:none;
white-space:nowrap;
margin-right:8px;
background:#fff;
position:relative;
margin-bottom:-1px;
}
#content .tabs ul li a{
display:block;
font-size: 0.9em;
text-decoration:none;
line-height:1.3em;
padding:4px 6px 4px 6px;
border: 1px solid #ccc;
border-bottom: 1px solid #bbbbbb;
background-color: #eeeeee;
color:#777;
font-weight:bold;
}

#content .tabs ul li a:hover {
background-color: #ffffdd;
text-decoration:none;
}

#content .tabs ul li a.selected {
background-color: #fff;
border: 1px solid #bbbbbb;
border-bottom: 1px solid #fff;
}

#content .tabs ul li a.selected:hover {
background-color: #fff;
}

div.tabs-buttons { position:absolute; right: 0; width: 48px; height: 24px; background: white; bottom: 0; border-bottom: 1px solid #bbbbbb; }

button.tab-left, button.tab-right {
	font-size: 0.9em;
	cursor: pointer;
	height:24px;
	border: 1px solid #ccc;
	border-bottom: 1px solid #bbbbbb;
	position:absolute;
	padding:4px;
	width: 20px;
	bottom: -1px;
}

button.tab-left {
	right: 20px;
	background: #eeeeee url(../images/bullet_arrow_left.png) no-repeat 50% 50%;
}

button.tab-right {
	right: 0;
	background: #eeeeee url(../images/bullet_arrow_right.png) no-repeat 50% 50%;
}

/***** Auto-complete *****/
div.autocomplete {
  position:absolute;
  width:400px;
  margin:0;
  padding:0;
}
div.autocomplete ul {
  list-style-type:none;
  margin:0;
  padding:0;
}
div.autocomplete ul li {
  list-style-type:none;
  display:block;
  margin:-1px 0 0 0;
  padding:2px;
  cursor:pointer;
  font-size: 90%;
  border: 1px solid #ccc;
  border-left: 1px solid #ccc;
  border-right: 1px solid #ccc;
  background-color:white;
}
div.autocomplete ul li.selected { background-color: #ffb;}
div.autocomplete ul li span.informal {
  font-size: 80%;
  color: #aaa;
}

#parent_issue_candidates ul li {width: 500px;}

/***** Diff *****/
.diff_out { background: #fcc; }
.diff_in { background: #cfc; }

/***** Wiki *****/
div.wiki table {
    border: 1px solid #505050;
    border-collapse: collapse;
    margin-bottom: 1em;
}

div.wiki table, div.wiki td, div.wiki th {
    border: 1px solid #bbb;
    padding: 4px;
}

div.wiki .external {
    background-position: 0% 60%;
    background-repeat: no-repeat;
    padding-left: 12px;
    background-image: url(../images/external.png);
}

div.wiki a.new {
    color: #b73535;
}

div.wiki pre {
    margin: 1em 1em 1em 1.6em;
    padding: 2px 2px 2px 0;
    background-color: #fafafa;
    border: 1px solid #dadada;
    width:auto;
    overflow-x: auto;
    overflow-y: hidden;
}

div.wiki ul.toc {
    background-color: #ffffdd;
    border: 1px solid #e4e4e4;
    padding: 4px;
    line-height: 1.2em;
    margin-bottom: 12px;
    margin-right: 12px;
    margin-left: 0;
    display: table
}
* html div.wiki ul.toc { width: 50%; } /* IE6 doesn't autosize div */

div.wiki ul.toc.right { float: right; margin-left: 12px; margin-right: 0; width: auto; }
div.wiki ul.toc.left  { float: left; margin-right: 12px; margin-left: 0; width: auto; }
div.wiki ul.toc li { list-style-type:none;}
div.wiki ul.toc li.heading2 { margin-left: 6px; }
div.wiki ul.toc li.heading3 { margin-left: 12px; font-size: 0.8em; }

div.wiki ul.toc a {
    font-size: 0.9em;
    font-weight: normal;
    text-decoration: none;
    color: #606060;
}
div.wiki ul.toc a:hover { color: #c61a1a; text-decoration: underline;}

a.wiki-anchor { display: none; margin-left: 6px; text-decoration: none; }
a.wiki-anchor:hover { color: #aaa !important; text-decoration: none; }
h1:hover a.wiki-anchor, h2:hover a.wiki-anchor, h3:hover a.wiki-anchor { display: inline; color: #ddd; }

div.wiki img { vertical-align: middle; } 

/***** My page layout *****/
.block-receiver {
border:1px dashed #c0c0c0;
margin-bottom: 20px;
padding: 15px 0 15px 0;
}

.mypage-box {
margin:0 0 20px 0;
color:#505050;
line-height:1.5em;
}

.handle {
cursor: move;
}

a.close-icon {
display:block;
margin-top:3px;
overflow:hidden;
width:12px;
height:12px;
background-repeat: no-repeat;
cursor:pointer;
background-image:url('../images/close.png');
}

a.close-icon:hover {
background-image:url('../images/close_hl.png');
}

/***** Gantt chart *****/
.gantt_hdr {
  position:absolute;
  top:0;
  height:16px;
  border-top: 1px solid #c0c0c0;
  border-bottom: 1px solid #c0c0c0;
  border-right: 1px solid #c0c0c0;
  text-align: center;
  overflow: hidden;
}

.task {
  position: absolute;
  height:8px;
  font-size:0.8em;
  color:#888;
  padding:0;
  margin:0;
  line-height:0.8em;
  white-space:nowrap;
}

.task_late { background:#f66 url(../images/task_late.png); border: 1px solid #f66; }
.task_done { background:#66f url(../images/task_done.png); border: 1px solid #66f; }  
.task_todo { background:#aaa url(../images/task_todo.png); border: 1px solid #aaa; }

.task_todo.parent { background: #888; border: 1px solid #888; height: 6px;}
.task_late.parent, .task_done.parent { height: 3px;}
.task_todo.parent .left  { position: absolute; background: url(../images/task_parent_end.png) no-repeat 0 0; width: 8px; height: 16px; margin-left: -5px; left: 0px; top: -1px;}
.task_todo.parent .right { position: absolute; background: url(../images/task_parent_end.png) no-repeat 0 0; width: 8px; height: 16px; margin-right: -5px; right: 0px; top: -1px;}

.milestone { background-image:url(../images/milestone.png); background-repeat: no-repeat; border: 0; }

/***** Icons *****/
.icon {
background-position: 0% 50%;
background-repeat: no-repeat;
padding-left: 20px;
padding-top: 2px;
padding-bottom: 3px;
}

.icon-add { background-image: url(../images/add.png); }
.icon-edit { background-image: url(../images/edit.png); }
.icon-copy { background-image: url(../images/copy.png); }
.icon-duplicate { background-image: url(../images/duplicate.png); }
.icon-del { background-image: url(../images/delete.png); }
.icon-move { background-image: url(../images/move.png); }
.icon-save { background-image: url(../images/save.png); }
.icon-cancel { background-image: url(../images/cancel.png); }
.icon-multiple { background-image: url(../images/table_multiple.png); }
.icon-folder { background-image: url(../images/folder.png); }
.open .icon-folder { background-image: url(../images/folder_open.png); }
.icon-package { background-image: url(../images/package.png); }
.icon-home { background-image: url(../images/home.png); }
.icon-user { background-image: url(../images/user.png); }
.icon-projects { background-image: url(../images/projects.png); }
.icon-help { background-image: url(../images/help.png); }
.icon-attachment  { background-image: url(../images/attachment.png); }
.icon-history  { background-image: url(../images/history.png); }
.icon-time  { background-image: url(../images/time.png); }
.icon-time-add  { background-image: url(../images/time_add.png); }
.icon-stats  { background-image: url(../images/stats.png); }
.icon-warning  { background-image: url(../images/warning.png); }
.icon-fav  { background-image: url(../images/fav.png); }
.icon-fav-off  { background-image: url(../images/fav_off.png); }
.icon-reload  { background-image: url(../images/reload.png); }
.icon-lock  { background-image: url(../images/locked.png); }
.icon-unlock  { background-image: url(../images/unlock.png); }
.icon-checked  { background-image: url(../images/true.png); }
.icon-details  { background-image: url(../images/zoom_in.png); }
.icon-report  { background-image: url(../images/report.png); }
.icon-comment  { background-image: url(../images/comment.png); }
.icon-summary  { background-image: url(../images/lightning.png); }
.icon-server-authentication { background-image: url(../images/server_key.png); }

.icon-file { background-image: url(../images/files/default.png); }
.icon-file.text-plain { background-image: url(../images/files/text.png); }
.icon-file.text-x-c { background-image: url(../images/files/c.png); }
.icon-file.text-x-csharp { background-image: url(../images/files/csharp.png); }
.icon-file.text-x-php { background-image: url(../images/files/php.png); }
.icon-file.text-x-ruby { background-image: url(../images/files/ruby.png); }
.icon-file.text-xml { background-image: url(../images/files/xml.png); }
.icon-file.image-gif { background-image: url(../images/files/image.png); }
.icon-file.image-jpeg { background-image: url(../images/files/image.png); }
.icon-file.image-png { background-image: url(../images/files/image.png); }
.icon-file.image-tiff { background-image: url(../images/files/image.png); }
.icon-file.application-pdf { background-image: url(../images/files/pdf.png); }
.icon-file.application-zip { background-image: url(../images/files/zip.png); }
.icon-file.application-x-gzip { background-image: url(../images/files/zip.png); }

img.gravatar { 
	padding: 2px;
  border: solid 1px #d5d5d5;
  background: #fff;
}

div.issue img.gravatar {
	float: right;
	margin: 0 0 0 1em;
	padding: 5px;
}

div.issue table img.gravatar {
	height: 14px;
	width: 14px;
	padding: 2px;
	float: left;
	margin: 0 0.5em 0 0;
}

h2 img.gravatar {
	padding: 3px;
	margin: -2px 4px -4px 0;
	vertical-align: top;
}

h4 img.gravatar {
	padding: 3px;
	margin: -6px 0 -4px 0;
	vertical-align: top;
}

td.username img.gravatar {
	float: left;
	margin: 0 1em 0 0;
}

#activity dt img.gravatar {
	float: left;
	margin: 0 1em 1em 0;
}

#activity dt,
.journal {
	clear: left;
}

.journal-link {
	float: right;
}

h2 img { vertical-align:middle; }

.hascontextmenu { cursor: context-menu; }

/***** Media print specific styles *****/
@media print {
  #top-menu, #header, #main-menu, #sidebar, #footer, .contextual, .other-formats { display:none; }
  #main { background: #fff; }
  #content { width: 99%; margin: 0; padding: 0; border: 0; background: #fff; overflow: visible !important;}
	#wiki_add_attachment { display:none; }
  .hide-when-print { display: none; }
}

EOF

jstoolbar_css = <<'EOF'
.jstEditor {
	padding-left: 0px;
}
.jstEditor textarea, .jstEditor iframe {
  margin: 0;
}

.jstHandle {
	height: 10px;
	font-size: 0.1em;
	cursor: s-resize;
	/*background: transparent url(img/resizer.png) no-repeat 45% 50%;*/
}

.jstElements {
	padding: 3px 3px;
}

.jstElements button {
	margin-right : 6px;
	width : 24px;
	height: 24px;
	padding: 4px;
	border-style: solid;
	border-width: 1px;
	border-color: #ddd;
	background-color : #f7f7f7;
	background-position : 50% 50%;
	background-repeat: no-repeat;
}
.jstElements button:hover {
	border-color : #000;
}
.jstElements button span {
	display : none;	
}
.jstElements span {
	display : inline;
}

.jstSpacer {
	width : 0px;
	font-size: 1px;
	margin-right: 4px;
}

.jstElements .help { float: right; margin-right: 1em; padding-top: 8px; font-size: 0.9em; }

/* Buttons
-------------------------------------------------------- */
.jstb_strong {
	background-image: url(../images/jstoolbar/bt_strong.png);
}
.jstb_em {
	background-image: url(../images/jstoolbar/bt_em.png);
}
.jstb_ins {
	background-image: url(../images/jstoolbar/bt_ins.png);
}
.jstb_del {
	background-image: url(../images/jstoolbar/bt_del.png);
}
.jstb_code {
	background-image: url(../images/jstoolbar/bt_code.png);
}
.jstb_h1 {
	background-image: url(../images/jstoolbar/bt_h1.png);
}
.jstb_h2 {
	background-image: url(../images/jstoolbar/bt_h2.png);
}
.jstb_h3 {
	background-image: url(../images/jstoolbar/bt_h3.png);
}
.jstb_ul {
	background-image: url(../images/jstoolbar/bt_ul.png);
}
.jstb_ol {
	background-image: url(../images/jstoolbar/bt_ol.png);
}
.jstb_bq {
	background-image: url(../images/jstoolbar/bt_bq.png);
}
.jstb_unbq {
	background-image: url(../images/jstoolbar/bt_bq_remove.png);
}
.jstb_pre {
	background-image: url(../images/jstoolbar/bt_pre.png);
}
.jstb_link {
	background-image: url(../images/jstoolbar/bt_link.png);
}
.jstb_img {
	background-image: url(../images/jstoolbar/bt_img.png);
}

EOF

scm_css = <<'EOF'

div.changeset-changes ul { margin: 0; padding: 0; }
div.changeset-changes ul > ul { margin-left: 18px; padding: 0; }

li.change { 
    list-style-type:none;
    background-image: url(../images/bullet_black.png); 
    background-position: 1px 1px;
    background-repeat: no-repeat;
    padding-top: 1px;
    padding-bottom: 1px;
    padding-left: 20px;
    margin: 0;
}
li.change.folder { background-image: url(../images/folder_open.png); }
li.change.folder.change-A { background-image: url(../images/folder_open_add.png); }
li.change.folder.change-M { background-image: url(../images/folder_open_orange.png); }
li.change.change-A { background-image: url(../images/bullet_add.png); }
li.change.change-M { background-image: url(../images/bullet_orange.png); }
li.change.change-C { background-image: url(../images/bullet_blue.png); }
li.change.change-R { background-image: url(../images/bullet_purple.png); }
li.change.change-D { background-image: url(../images/bullet_delete.png); }

li.change .copied-from { font-style: italic; color: #999; font-size: 0.9em; }
li.change .copied-from:before { content: " - "}

#changes-legend { float: right; font-size: 0.8em; margin: 0; }
#changes-legend li { float: left; background-position: 5px 0; }

table.filecontent { border: 1px solid #ccc;  border-collapse: collapse; width:98%; background-color: #fafafa; }
table.filecontent th { border: 1px solid #ccc; background-color: #eee; }
table.filecontent th.filename {	background-color: #e4e4d4; text-align: left; padding: 0.2em;}
table.filecontent tr.spacing th { text-align:center; }
table.filecontent tr.spacing td { height: 0.4em; background: #EAF2F5;}
table.filecontent th.line-num {
    border: 1px solid #d7d7d7;
	font-size: 0.8em;
	text-align: right;
	width: 2%;
	padding-right: 3px;
	color: #999;
}
table.filecontent th.line-num a {
	text-decoration: none;
	color: inherit;
}
table.filecontent td.line-code pre {
    margin: 0px;
    white-space: pre-wrap; /* CSS2.1 compliant */
    white-space: -moz-pre-wrap; /* Mozilla-based browsers */
    white-space: -o-pre-wrap; /* Opera 7+ */
}

/* 12 different colors for the annonate view */
table.annotate tr.bloc-0 {background: #FFFFBF;}
table.annotate tr.bloc-1 {background: #EABFFF;}
table.annotate tr.bloc-2 {background: #BFFFFF;}
table.annotate tr.bloc-3 {background: #FFD9BF;}
table.annotate tr.bloc-4 {background: #E6FFBF;}
table.annotate tr.bloc-5 {background: #BFCFFF;}
table.annotate tr.bloc-6 {background: #FFBFEF;}
table.annotate tr.bloc-7 {background: #FFE6BF;}
table.annotate tr.bloc-8 {background: #FFE680;}
table.annotate tr.bloc-9 {background: #AA80FF;}
table.annotate tr.bloc-10 {background: #FFBFDC;}
table.annotate tr.bloc-11 {background: #BFE4FF;}

table.annotate td.revision {
    text-align: center;
    width: 2%;
    padding-left: 1em;
    background: inherit;
}
    
table.annotate td.author {
    text-align: center;
    border-right: 1px solid #d7d7d7;
    white-space: nowrap;
    padding-left: 1em;
    padding-right: 1em;
    width: 3%;
    background: inherit;
    font-size: 90%;
}

table.annotate td.line-code { background-color: #fafafa; }

div.action_M { background: #fd8 }
div.action_D { background: #f88 }
div.action_A { background: #bfb }

/************* CodeRay styles *************/
.syntaxhl div {display: inline;}
.syntaxhl .no { padding: 2px 4px 2px 4px; background-color: #eee; margin:0 }
.syntaxhl .code pre { overflow: auto }
.syntaxhl .debug { color:white ! important; background:blue ! important; }

.syntaxhl .af { color:#00C }
.syntaxhl .an { color:#007 }
.syntaxhl .at { color:#f08 }
.syntaxhl .av { color:#700 }
.syntaxhl .aw { color:#C00 }
.syntaxhl .bi { color:#509; font-weight:bold }
.syntaxhl .c  { color:#888; }

.syntaxhl .ch { color:#04D }
.syntaxhl .ch .k { color:#04D }
.syntaxhl .ch .dl { color:#039 }

.syntaxhl .cl { color:#B06; font-weight:bold }
.syntaxhl .cm { color:#A08; font-weight:bold }
.syntaxhl .co { color:#036; font-weight:bold }
.syntaxhl .cr { color:#0A0 }
.syntaxhl .cv { color:#369 }
.syntaxhl .de { color:#B0B; }
.syntaxhl .df { color:#099; font-weight:bold }
.syntaxhl .di { color:#088; font-weight:bold }
.syntaxhl .dl { color:black }
.syntaxhl .do { color:#970 }
.syntaxhl .dt { color:#34b }
.syntaxhl .ds { color:#D42; font-weight:bold }
.syntaxhl .e  { color:#666; font-weight:bold }
.syntaxhl .en { color:#800; font-weight:bold }
.syntaxhl .er { color:#F00; background-color:#FAA }
.syntaxhl .ex { color:#C00; font-weight:bold }
.syntaxhl .fl { color:#60E; font-weight:bold }
.syntaxhl .fu { color:#06B; font-weight:bold }
.syntaxhl .gv { color:#d70; font-weight:bold }
.syntaxhl .hx { color:#058; font-weight:bold }
.syntaxhl .i  { color:#00D; font-weight:bold }
.syntaxhl .ic { color:#B44; font-weight:bold }

.syntaxhl .il { background: #ddd; color: black }
.syntaxhl .il .il { background: #ccc }
.syntaxhl .il .il .il { background: #bbb }
.syntaxhl .il .idl { background: #ddd; font-weight: bold; color: #666 }
.syntaxhl .idl { background-color: #bbb; font-weight: bold; color: #666; }

.syntaxhl .im { color:#f00; }
.syntaxhl .in { color:#B2B; font-weight:bold }
.syntaxhl .iv { color:#33B }
.syntaxhl .la { color:#970; font-weight:bold }
.syntaxhl .lv { color:#963 }
.syntaxhl .oc { color:#40E; font-weight:bold }
.syntaxhl .of { color:#000; font-weight:bold }
.syntaxhl .op { }
.syntaxhl .pc { color:#038; font-weight:bold }
.syntaxhl .pd { color:#369; font-weight:bold }
.syntaxhl .pp { color:#579; }
.syntaxhl .ps { color:#00C; font-weight:bold }
.syntaxhl .pt { color:#074; font-weight:bold }
.syntaxhl .r, .kw  { color:#080; font-weight:bold }

.syntaxhl .ke { color: #808; }
.syntaxhl .ke .dl { color: #606; }
.syntaxhl .ke .ch { color: #80f; }
.syntaxhl .vl { color: #088; }

.syntaxhl .rx { background-color:#fff0ff }
.syntaxhl .rx .k { color:#808 }
.syntaxhl .rx .dl { color:#404 }
.syntaxhl .rx .mod { color:#C2C }
.syntaxhl .rx .fu  { color:#404; font-weight: bold }

.syntaxhl .s { background-color:#fff0f0; color: #D20; }
.syntaxhl .s .s { background-color:#ffe0e0 }
.syntaxhl .s .s  .s { background-color:#ffd0d0 }
.syntaxhl .s .k { }
.syntaxhl .s .ch { color: #b0b; }
.syntaxhl .s .dl { color: #710; }

.syntaxhl .sh { background-color:#f0fff0; color:#2B2 }
.syntaxhl .sh .k { }
.syntaxhl .sh .dl { color:#161 }

.syntaxhl .sy { color:#A60 }
.syntaxhl .sy .k { color:#A60 }
.syntaxhl .sy .dl { color:#630 }

.syntaxhl .ta { color:#070 }
.syntaxhl .tf { color:#070; font-weight:bold }
.syntaxhl .ts { color:#D70; font-weight:bold }
.syntaxhl .ty { color:#339; font-weight:bold }
.syntaxhl .v  { color:#036 }
.syntaxhl .xt { color:#444 }

.syntaxhl .ins { background: #cfc; }
.syntaxhl .del { background: #fcc; }
.syntaxhl .chg { color: #aaf; background: #007; }
.syntaxhl .head { color: #f8f; background: #505 }

.syntaxhl .ins .ins { color: #080; font-weight:bold }
.syntaxhl .del .del { color: #800; font-weight:bold }
.syntaxhl .chg .chg { color: #66f; }
.syntaxhl .head .head { color: #f4f; }

EOF

class String
  def blank?
    if self == ""
      return true
    else
      return false
    end
  end
end
text = ""
ARGF.each_line {|line| text += line}
$f = Redmine::WikiFormatting::Textile::Formatter.new(text);
puts '<meta http-equiv="Content" content-type="text/html; charset=UTF-8">'
puts "<style>"
puts application_css
puts jstoolbar_css
puts scm_css
puts "</style>"
html = $f.to_html
html.gsub! /<table>/, "<table border='1' style='border-collapse: collapse'>"
html.gsub! /<td>\s*<\/td>/, "<td>&nbsp;</td>"
puts html
